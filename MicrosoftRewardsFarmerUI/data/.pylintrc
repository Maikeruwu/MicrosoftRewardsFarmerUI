[MESSAGES CONTROL]
# Reasons disabled:
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# unused-argument - generic callbacks and setup methods create a lot of warnings
# global-statement - used for the on-demand requirement installation
# redefined-variable-type - this is Python, we're duck typing!
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# not-an-iterable - https://github.com/PyCQA/pylint/issues/2311
# unnecessary-pass - readability for functions which only contain pass
disable=
  broad-exception-raised,
  abstract-method,
  cyclic-import,
  duplicate-code,
  global-statement,
  inconsistent-return-statements,
  locally-disabled,
  not-an-iterable,
  not-context-manager,
  too-few-public-methods,
  too-many-arguments,
  too-many-branches,
  too-many-instance-attributes,
  too-many-lines,
  too-many-locals,
  too-many-public-methods,
  too-many-return-statements,
  too-many-statements,
  unnecessary-pass,
  unused-argument,
  missing-class-docstring, # TODO: Recommend revisiting this
  missing-function-docstring # TODO: Recommend revisiting this

[REPORTS]
reports=no

[FORMAT]
expected-line-ending-format=LF

[BASIC]
# Reasons disabled:
# TODO: Probably switch to snake_case in the future

# ---- Naming Conventions ----
module-naming-style="camelCase,snake_case"
class-naming-style="camelCase,snake_case"
function-naming-style="camelCase,snake_case"
method-naming-style="camelCase,snake_case"
argument-naming-style="camelCase,snake_case"
variable-naming-style="camelCase,snake_case"